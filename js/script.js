// –ó–≤—É–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å Mellstroy - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø
document.addEventListener('DOMContentLoaded', function() {
    console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!');
    
    const soundBoard = {
        sounds: new Map(),
        currentlyPlaying: null,
        audioContext: null,
        
        // –ú–ê–°–°–ò–í –° –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò –ú–ï–ú–û–í
        memeNames: [
            "–∞–º–∞–º–∞–º",
            "—Å–ª–∏–≤—ã—ã", 
            "—Å–∫–æ–ª—å–∫–æ–æ?",
            "—Ä–∞–¥—É–µ—Ç—Å—è",
			"–±—ç–º–±—ç–º–±—ç–º",
            "—á—Ç–æ –∑–∞ –±–∏–∑–Ω—ç—Å remix",
            "—á—Ç–æ –∑–∞ –±–∏–∑–Ω—ç—Å",
            "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∑–≤—É–∫ –¥–æ–Ω–∞—Ç–∞ ",
            "–¥–∞ –¥–∞ –Ω–µ—Ç –Ω–µ—Ç remix ", 
            " —ë—â–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª ",
            " –µ—â—ë –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª",
            " –µ—â–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª"
        ],
        
        init() {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏...');
            this.setupAudioContext();
            this.createSoundPanels();
            this.setupEventListeners();
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        },
        
        // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º
        setupAudioContext() {
            try {
                this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            } catch (e) {
                console.warn('AudioContext –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', e);
            }
        },
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª–∏ –¥–ª—è –∑–≤—É–∫–æ–≤
        createSoundPanels() {
            const soundsContainer = document.getElementById('sounds-container');
            
            if (!soundsContainer) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–≤—É–∫–æ–≤!');
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º DocumentFragment –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏
            const fragment = document.createDocumentFragment();
            
            for (let i = 1; i <= 12; i++) {
                const soundId = `sound${i}`;
                const filename = `sounds${i}.mp3`;
                const memeName = this.memeNames[i-1] || `–ú–µ–º ${i}`;
                
                const panel = this.createSoundPanel(soundId, filename, memeName);
                fragment.appendChild(panel);
                
                // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                setTimeout(() => {
                    this.preloadSound(soundId, filename);
                }, i * 100); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            }
            
            soundsContainer.appendChild(fragment);
            console.log('–°–æ–∑–¥–∞–Ω–æ 12 –∑–≤—É–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π');
        },
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        createSoundPanel(soundId, filename, title) {
            const panel = document.createElement('div');
            panel.className = 'sound-panel';
            panel.setAttribute('data-sound', soundId);
            
            panel.innerHTML = `
                <div class="panel-content">
                    <h3>${title}</h3>
                    <div class="sound-info">
                        <div class="sound-filename">${filename}</div>
                        <div class="sound-status" id="status-${soundId}">‚ö´ –û–∂–∏–¥–∞–Ω–∏–µ...</div>
                    </div>
                    <div class="panel-buttons">
                        <button class="play-btn" data-sound="${soundId}">
                            <div class="play-icon">‚ñ∂</div>
                            –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                        </button>
                        <button class="download-btn" data-filename="${filename}">
                            ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å
                        </button>
                    </div>
                </div>
            `;
            
            // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            const playBtn = panel.querySelector('.play-btn');
            const downloadBtn = panel.querySelector('.download-btn');
            
            playBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.playSound(soundId, panel, filename);
            });
            
            downloadBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.downloadSound(filename, title);
            });
            
            return panel;
        },
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        preloadSound(soundId, filename) {
            const audio = new Audio();
            audio.src = `./sounds/${filename}`;
            audio.preload = 'metadata'; // –¢–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
            
            const onLoaded = () => {
                console.log(`‚úÖ –ó–≤—É–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: ${filename}`);
                this.updateStatus(soundId, '‚úÖ –ì–æ—Ç–æ–≤');
                this.sounds.set(soundId, audio);
                // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                audio.removeEventListener('loadeddata', onLoaded);
                audio.removeEventListener('error', onError);
            };
            
            const onError = (e) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${filename}`, e);
                this.updateStatus(soundId, '‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                audio.removeEventListener('loadeddata', onLoaded);
                audio.removeEventListener('error', onError);
            };
            
            audio.addEventListener('loadeddata', onLoaded, { once: true });
            audio.addEventListener('error', onError, { once: true });
        },
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        async playSound(soundId, panel, filename) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–≤—É–∫
            this.stopCurrentSound();
            
            const audio = this.sounds.get(soundId);
            
            if (!audio) {
                console.error(`–ó–≤—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${soundId}`);
                this.updateStatus(soundId, '‚ùå –û—à–∏–±–∫–∞');
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            const volume = document.getElementById('volume').value;
            audio.volume = volume;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
            audio.currentTime = 0;
            
            try {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AudioContext –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (this.audioContext && this.audioContext.state === 'suspended') {
                    await this.audioContext.resume();
                }
                
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                await audio.play();
                
                this.currentlyPlaying = audio;
                this.setPlayingState(panel, true);
                this.updateStatus(soundId, 'üî¥ –ò–≥—Ä–∞–µ—Ç...');
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                const onEnded = () => {
                    this.setPlayingState(panel, false);
                    this.updateStatus(soundId, '‚úÖ –ì–æ—Ç–æ–≤');
                    this.currentlyPlaying = null;
                    audio.removeEventListener('ended', onEnded);
                };
                
                audio.addEventListener('ended', onEnded, { once: true });
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                this.updateStatus(soundId, '‚ùå –û—à–∏–±–∫–∞');
            }
        },
        
        // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞
        downloadSound(filename, title) {
            const soundUrl = `./sounds/${filename}`;
            const link = document.createElement('a');
            link.href = soundUrl;
            link.download = `${title}.mp3`;
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            
            // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            setTimeout(() => {
                document.body.removeChild(link);
            }, 100);
        },
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–≤—É–∫–∞
        stopCurrentSound() {
            if (this.currentlyPlaying) {
                this.currentlyPlaying.pause();
                this.currentlyPlaying.currentTime = 0;
                this.currentlyPlaying = null;
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
                document.querySelectorAll('.sound-panel.playing').forEach(panel => {
                    this.setPlayingState(panel, false);
                });
            }
        },
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        setPlayingState(panel, isPlaying) {
            panel.classList.toggle('playing', isPlaying);
        },
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        updateStatus(soundId, message) {
            const statusElement = document.getElementById(`status-${soundId}`);
            if (statusElement) {
                statusElement.textContent = message;
            }
        },
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        setupEventListeners() {
            const volumeSlider = document.getElementById('volume');
            const volumeValue = document.getElementById('volume-value');
            
            if (volumeSlider && volumeValue) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                let rafId;
                volumeSlider.addEventListener('input', (e) => {
                    if (rafId) cancelAnimationFrame(rafId);
                    
                    rafId = requestAnimationFrame(() => {
                        const value = Math.round(e.target.value * 100);
                        volumeValue.textContent = `${value}%`;
                        
                        if (this.currentlyPlaying) {
                            this.currentlyPlaying.volume = e.target.value;
                        }
                    });
                });
            }
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤
            const stopBtn = document.getElementById('stop-all');
            if (stopBtn) {
                stopBtn.addEventListener('click', () => {
                    this.stopCurrentSound();
                });
            }
            
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞
            this.setupSmoothScrolling();
        },
        
        // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        setupSmoothScrolling() {
            document.querySelectorAll('a[href^="#"]').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({ behavior: 'smooth' });
                    }
                });
            });
        }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º
    soundBoard.init();
    
    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    document.addEventListener('keydown', (e) => {
        if (e.code === 'Space') {
            e.preventDefault();
            const stopBtn = document.getElementById('stop-all');
            if (stopBtn) stopBtn.click();
        }
    });
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if ('ontouchstart' in window) {
        document.documentElement.style.touchAction = 'manipulation';
    }
});
